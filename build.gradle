plugins {
    id 'com.jfrog.artifactory' version '3.1.1'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply from: 'artifactory-template.gradle'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'http://jartifacts.longlinkislong.com/artifactory/libs-snapshot' }
    maven { url 'http://jartifacts.longlinkislong.com/artifactory/libs-release' }
}

def getSnapshot(projectName) {
    def result = new ProcessBuilder('sqlite3', database, "SELECT hash FROM versioning WHERE library='$projectName'").start().text.trim()
    
    return "$result-SNAPSHOT"
}

def getVersion(projectName) {
    return getVersion(projectName, build)
}

def getVersion(projectName, buildType) {
    if (isJenkins.toBoolean()) {
        if (buildType == 'snapshot') {
            return getSnapshot(projectName)
        } else if (buildType == 'release') {
            return getRelease(projectName)
        } else {
            throw new IllegalStateException("Unsupported build type: $buildType")
        }
    } else {
        if (buildType == 'snapshot') {
            return "http://jenkins.longlinkislong.com/job/$projectName/lastSuccessfulBuild/artifact/build/version.snapshot".toURL().text.trim()
        } else if (buildType == 'release') {
            return "http://jenkins.longlinkislong.com/job/$projectName/lastSuccessfulBuild/artifact/build/version.release".toURL().text.trim()
        } else {
            throw new IllegalArgumentException("Unsupported build type: $buildType")
        }
    }
}

def getRelease(projectName) {
    def version = new ProcessBuilder('sqlite3', database, "SELECT major,minor,revision FROM versioning WHERE library='$projectName'").start().text.trim()
    
    if (version.empty) {
        def dbFile = new File(database).absolutePath
        System.err.println("Library [$projectName] was not found in database: $dbFile")
        return null
    } else {
        return version.replace('|', '.')
    }
}
dependencies {        
    compile 'org.slf4j:slf4j-api:1.7.+'
    
    def gloopSubProj = file('../core')
    
    if(gloopSubProj.exists()) {
        compile files('../core/build/libs/gloop.jar')
    } else {   
        compile "com.longlinkislong:gloop:${getVersion('gloop')}"    
    }
    
    compile "com.longlinkislong:gloop-vectors:${getVersion('gloop-vectors')}"
    compile "com.runouw:wrappers:${getVersion('wrappers')}"
    
    compile "org.lwjgl:lwjgl-opengl:3.1.1"
    compile "org.lwjgl:lwjgl-opengles:3.1.1"
    compile "org.lwjgl:lwjgl-glfw:3.1.1"

    testCompile group: 'junit', name: 'junit', version: '4.10'
}
